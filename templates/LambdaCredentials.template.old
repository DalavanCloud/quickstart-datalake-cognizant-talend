{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "S3BucketName": {
            "Type": "String",
            "Description": "Enter a name for the S3 bucket to hold Data Sources properties metadata files",
            "Default": "oodle-datasources"
        },
        
        "EmrMetadataFileName": {
            "Type": "String",
            "Default": "oodle-emr.properties"
        },
        "EmrMaster": {
            "Type": "String",
            "Default": "disabled"
        },

        "RedshiftMetadataFileName": {
            "Type": "String",
            "Default": "oodle-redshift.properties"
        },
        "RedshiftHost": {
            "Description": "Redshift Host.",
            "Type": "String"
        },
		"RedshiftPort": {
            "Description": "RedShift Port",
            "Type": "String"
        },
		"RedshiftUsername": {
            "Description": "RedShift Username",
            "Type": "String"
        },
        "RedshiftPassword": {
            "Description": "RedShift Password:  Can only contain alphanumeric characters or the following special characters !^*-_+, between 8 and 28 characters.  Must contain at least one lowercase letter, one uppercase letter and one number.",
            "NoEcho": true,
            "Type": "String",
			"MinLength": 8,
            "MaxLength": 28,
            "AllowedPattern": "[a-zA-Z0-9!^*\\-_+]*"
        },
		"RedshiftDbName": {
            "Description": "RedShift Database name",
            "Type": "String"
        },
        
        "RdsMetadataFileName": {
            "Type": "String",
            "Default": "oodle-rds.properties"
        },
        "TacDbHost": {
            "Description": "TAC Host.",
            "Type": "String"
        },
        "TacDbPort": {
            "Description": "TAC Port.",
            "Type": "Number",
            "MinValue": "0",
            "MaxValue": "65535"
        },
        "MasterDbUser": {
            "Description": "The master or root user used to create TAC and AMC databases and the TAC user.",
            "Type": "String"
        },
        "MasterDbPassword": {
            "Description": "Master user database password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "TacDbSchema": {
            "Description": "TAC database schema.",
            "Type": "String"
        },
        "TacUsername": {
            "Description": "TAC database user.",
            "Type": "String"
        },
        "TacPassword": {
            "Description": "TAC database password.",
            "Type": "String",
            "NoEcho": "true"
        },

        "NexusMetadataFileName": {
            "Type": "String",
            "Default": "oodle-nexus.properties"
        },
        "NexusPort": {
            "Description": "Nexus port.",
            "Type": "Number",
            "Default": "8081",
            "MinValue": "1",
            "MaxValue": "65535"
        },
        "NexusAdminUserid": {
            "Description": "Nexus administrator userid.",
            "Type": "String",
            "Default": "admin"
        },
        "NexusAdminPassword": {
            "Description": "Nexus password.",
            "Type": "String",
            "Default": "Talend123",
            "NoEcho": "true"
        },

        "GitMetadataFileName": {
            "Type": "String",
            "Default": "oodle-git.properties"
        },
        "GitProtocol": {
            "Description": "Git protocol.",
            "Type": "String",
            "Default": "http"
        },
        "GitHost": {
            "Description": "Git host.",
            "Type": "String",
            "Default": ""
        },
        "GitPort": {
            "Description": "Git port.",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "65535",
            "Default": "443"
        },
        "GitRepo": {
            "Description": "Git repository.",
            "Type": "String",
            "Default": "oodlejobs"
        },
        "GitAdminUserid": {
            "Description": "Git user.",
            "Type": "String",
            "Default": "tadmin"
        },
        "GitAdminPassword": {
            "Description": "Git password.",
            "Type": "String",
            "NoEcho": "true",
            "Default": "tadm1nPassw0rd"
        },
        "GitAdminEmail": {
            "Description": "Git admin contact email.",
            "Type": "String",
            "Default": ""
        },
        "GitTacUserid": {
            "Description": "Git TAC userid.",
            "Type": "String",
            "Default": "tac"
        },
        "GitTacPassword": {
            "Description": "Git TAC password.",
            "Type": "String",
            "NoEcho": "true",
            "Default": "tacPassw0rd"
        },
        "GitTacEmail": {
            "Description": "TAC contact email.",
            "Type": "String",
            "Default": ""
        }

    },
    "Resources": {
        "CredentialBucket": {
            "Type": "AWS::S3::Bucket",
			"DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "Private"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:*"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "s3writepolicy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "/",
                                            [
                                                {
                                                    "Fn::GetAtt": [
                                                        "CredentialBucket",
                                                        "Arn"
                                                    ]
                                                },
                                                "*"
                                            ]
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        

        "LambdaLogEmrMetadata": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "Runtime": "nodejs6.10",
                "Timeout": "120",
                "FunctionName": "LogEmrMetadata",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
"var response = require('cfn-response');",
"var os = require('os');",
"exports.myHandler = function(event, context) {",
"var AWS = require('aws-sdk');",
"var myString = 'EmrMaster=' + event.ResourceProperties.EmrMaster + os.EOL;",
"var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
"var s3bkt = new AWS.S3({params: {Bucket: event.ResourceProperties.S3BUCKET}});",
"var responseData = {};",
"console.log('Creating S3 key with data source properties');",
"s3bkt.upload(params, function(err, data) {",
"if (err) {",
"console.log(err, err.stack);",
"responseData = {\"CreateEmrPropertiesFile\" : \"FAILED\"};",
"response.send(event, context, response.FAILED, responseData);",
"//              context.fail();",
"                 return;",
"} else {",
"console.log('Upload successful');",
"responseData = {\"CreateEmrPropertiesFile\" : \"SUCCESS\"};",
"response.send(event, context, response.SUCCESS, responseData);",
"//              context.succeed();",
"return;",
"}",
"});",
"};"
                            ]
                        ]
                    }
                }
            }
        },
        "CreateEmrPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaLogEmrMetadata",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaLogEmrMetadata",
                        "Arn"
                    ]
                },
                "EmrMaster": { "Ref": "EmrMaster" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "EmrMetadataFileName" }
            }
        },

        "LambdaLogRedshiftMetadata": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "Runtime": "nodejs6.10",
                "Timeout": "120",
                "FunctionName": "LogRedshiftMetadata",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
"var response = require('cfn-response');",
"var os = require('os');",
"exports.myHandler = function(event, context) {",
"var AWS = require('aws-sdk');",
"var myString = 'RedshiftHost=' + event.ResourceProperties.RedshiftHost + os.EOL + 'RedshiftPort=' + event.ResourceProperties.RedshiftPort + os.EOL + 'RedshiftUsername=' + event.ResourceProperties.RedshiftUsername + os.EOL + 'RedshiftPassword=' + event.ResourceProperties.RedshiftPassword + os.EOL + 'RedshiftDbName=' + event.ResourceProperties.RedshiftDbName ;",
"var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
"var s3bkt = new AWS.S3({params: {Bucket: event.ResourceProperties.S3BUCKET}});",
"var responseData = {};",
"console.log('Creating S3 key with data source properties');",
"s3bkt.upload(params, function(err, data) {",
"if (err) {",
"console.log(err, err.stack);",
"responseData = {\"CreateRedshiftPropertiesFile\" : \"FAILED\"};",
"response.send(event, context, response.FAILED, responseData);",
"//context.fail();",
"return;",
"} else {",
"console.log('Upload successful');",
"responseData = {\"CreateRedshiftPropertiesFile\" : \"SUCCESS\"};",
"response.send(event, context, response.SUCCESS, responseData);",
"//context.succeed();",
"return;",
"}",
"});",
"};"
                            ]
                        ]
                    }
                }
            }
        },
        "CreateRedshiftPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaLogRedshiftMetadata",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaLogRedshiftMetadata",
                        "Arn"
                    ]
                },
                "RedshiftHost": { "Ref": "RedshiftHost" },
                "RedshiftPort": { "Ref": "RedshiftPort" },
                "RedshiftUsername": { "Ref": "RedshiftUsername" },
                "RedshiftPassword": { "Ref": "RedshiftPassword" },
                "RedshiftDbName": { "Ref": "RedshiftDbName" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "RedshiftMetadataFileName" }
            }
        },

        "LambdaLogRdsMetadata": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "Runtime": "nodejs6.10",
                "Timeout": "120",
                "FunctionName": "LogRdsMetadata",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
"var response = require('cfn-response');",
"var os = require('os');",
"exports.myHandler = function(event, context) {",
"var AWS = require('aws-sdk');",
"var myString = 'TacDbHost=' + event.ResourceProperties.TacDbHost + os.EOL;",
"myString += 'TacDbPort=' + event.ResourceProperties.TacDbPort + os.EOL;",
"myString += 'MasterDbUser=' + event.ResourceProperties.MasterDbUser + os.EOL;",
"myString += 'MasterDbPassword=' + event.ResourceProperties.MasterDbPassword + os.EOL;",
"myString += 'TacDbSchema=' + event.ResourceProperties.TacDbSchema + os.EOL;",
"myString += 'TacUsername=' + event.ResourceProperties.TacUsername + os.EOL;",
"myString += 'TacPassword=' + event.ResourceProperties.TacPassword + os.EOL;",
"var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
"var s3bkt = new AWS.S3({params: {Bucket: event.ResourceProperties.S3BUCKET}});",
"var responseData = {};",
"console.log('Creating S3 key with data source properties');",
"s3bkt.upload(params, function(err, data) {",
"if (err) {",
"console.log(err, err.stack);",
"responseData = {\"CreateRdsPropertiesFile\" : \"FAILED\"};",
"response.send(event, context, response.FAILED, responseData);",
"//context.fail();",
"return;",
"} else {",
"console.log('Upload successful');",
"responseData = {\"CreateRdsPropertiesFile\" : \"SUCCESS\"};",
"response.send(event, context, response.SUCCESS, responseData);",
"//              context.succeed();",
"return;",
"}",
"});",
"};"
                            ]
                        ]
                    }
                }
            }
        },
        "CreateRdsPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaLogRdsMetadata",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaLogRdsMetadata",
                        "Arn"
                    ]
                },
                "TacDbHost": { "Ref": "TacDbHost" },
                "TacDbPort": { "Ref": "TacDbPort" },
                "MasterDbUser": { "Ref": "MasterDbUser" },
                "MasterDbPassword": { "Ref": "MasterDbPassword" },
                "TacDbSchema": { "Ref": "TacDbSchema" },
                "TacUsername": { "Ref": "TacUsername" },
                "TacPassword": { "Ref": "TacPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "RdsMetadataFileName" }
            }
        },

        "LambdaLogNexusMetadata": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "Runtime": "nodejs6.10",
                "Timeout": "120",
                "FunctionName": "LogNexusMetadata",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
"var response = require('cfn-response');",
"var os = require('os');",
"exports.myHandler = function(event, context) {",
"var AWS = require('aws-sdk');",
"var myString = 'GitProtocol=' + event.ResourceProperties.GitProtocol + os.EOL;",
"var myString = 'GitHost=' + event.ResourceProperties.GitHost + os.EOL;",
"myString += 'GitPort=' + event.ResourceProperties.GitPort + os.EOL;",
"myString += 'GitRepo=' + event.ResourceProperties.GitRepo + os.EOL;",
"myString += 'GitAdminUserid=' + event.ResourceProperties.GitAdminUserid + os.EOL;",
"myString += 'GitAdminPassword=' + event.ResourceProperties.GitAdminPassword + os.EOL;",
"myString += 'GitAdminEmail=' + event.ResourceProperties.GitAdminEmail + os.EOL;",
"myString += 'GitTacUserid=' + event.ResourceProperties.GitTacUserid + os.EOL;",
"myString += 'GitTacPassword=' + event.ResourceProperties.GitTacPassword + os.EOL;",
"myString += 'GitTacEmail=' + event.ResourceProperties.GitTacEmail + os.EOL;",
"var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
"var s3bkt = new AWS.S3({params: {Bucket: event.ResourceProperties.S3BUCKET}});",
"var responseData = {};",
"console.log('Creating S3 key with data source properties');",
"s3bkt.upload(params, function(err, data) {",
"if (err) {",
"console.log(err, err.stack);",
"responseData = {\"CreateNexusPropertiesFile\" : \"FAILED\"};",
"response.send(event, context, response.FAILED, responseData);",
"//context.fail();",
"return;",
"} else {",
"console.log('Upload successful');",
"responseData = {\"CreateNexusPropertiesFile\" : \"SUCCESS\"};",
"response.send(event, context, response.SUCCESS, responseData);",
"//              context.succeed();",
"return;",
"}",
"});",
"};"
                            ]
                        ]
                    }
                }
            }
        },
        "CreateNexusPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaLogNexusMetadata",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaLogNexusMetadata",
                        "Arn"
                    ]
                },
                "NexusPort": { "Ref": "NexusPort" },
                "NexusAdminUserid": { "Ref": "NexusAdminUserid" },
                "NexusAdminPassword": { "Ref": "NexusAdminPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "NexusMetadataFileName" }
            }
        },


        "LambdaLogGitMetadata": {
            "Type": "AWS::Lambda::Function",
            "DependsOn": "CredentialBucket",
            "Properties": {
                "Runtime": "nodejs6.10",
                "Timeout": "120",
                "FunctionName": "LogGitMetadata",
                "Handler": "index.myHandler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
"var response = require('cfn-response');",
"var os = require('os');",
"exports.myHandler = function(event, context) {",
"var AWS = require('aws-sdk');",
"var myString = 'GitProtocol=' + event.ResourceProperties.GitProtocol + os.EOL;",
"var myString = 'GitHost=' + event.ResourceProperties.GitHost + os.EOL;",
"myString += 'GitPort=' + event.ResourceProperties.GitPort + os.EOL;",
"myString += 'GitRepo=' + event.ResourceProperties.GitRepo + os.EOL;",
"myString += 'GitAdminUserid=' + event.ResourceProperties.GitAdminUserid + os.EOL;",
"myString += 'GitAdminPassword=' + event.ResourceProperties.GitAdminPassword + os.EOL;",
"myString += 'GitAdminEmail=' + event.ResourceProperties.GitAdminEmail + os.EOL;",
"myString += 'GitTacUserid=' + event.ResourceProperties.GitTacUserid + os.EOL;",
"myString += 'GitTacPassword=' + event.ResourceProperties.GitTacPassword + os.EOL;",
"myString += 'GitTacEmail=' + event.ResourceProperties.GitTacEmail + os.EOL;",
"var params = {  Body: myString, Key: event.ResourceProperties.S3KEY };",
"var s3bkt = new AWS.S3({params: {Bucket: event.ResourceProperties.S3BUCKET}});",
"var responseData = {};",
"console.log('Creating S3 key with data source properties');",
"s3bkt.upload(params, function(err, data) {",
"if (err) {",
"console.log(err, err.stack);",
"responseData = {\"CreateGitPropertiesFile\" : \"FAILED\"};",
"response.send(event, context, response.FAILED, responseData);",
"//context.fail();",
"return;",
"} else {",
"console.log('Upload successful');",
"responseData = {\"CreateGitPropertiesFile\" : \"SUCCESS\"};",
"response.send(event, context, response.SUCCESS, responseData);",
"//              context.succeed();",
"return;",
"}",
"});",
"};"
                            ]
                        ]
                    }
                }
            }
        },
        "CreateGitPropertiesFile": {
            "Type": "Custom::LambdaCallout",
            "DependsOn": "LambdaLogGitMetadata",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "LambdaLogGitMetadata",
                        "Arn"
                    ]
                },
                "GitProtocol": { "Ref": "GitProtocol" },
                "GitHost": { "Ref": "GitHost" } ,
                "GitPort": { "Ref": "GitPort" },
                "GitRepo": { "Ref": "GitRepo" },
                "GitAdminEmail": { "Ref": "GitAdminEmail" },
                "GitAdminUserid": { "Ref": "GitAdminUserid" },
                "GitAdminPassword": { "Ref": "GitAdminPassword" },
                "GitTacEmail": { "Ref": "GitTacEmail" },
                "GitTacUserid": { "Ref": "GitTacUserid" },
                "GitTacPassword": { "Ref": "GitTacPassword" },
                "S3BUCKET": { "Ref": "CredentialBucket" },
                "S3KEY": { "Ref": "GitMetadataFileName" }
            }
        }


    },
    "Outputs": {
        "CredentialBucket": {
            "Description": "Bucket storing data source property files",
            "Value": { "Ref": "CredentialBucket" },
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}:CredentialBucket"
				}
			}
        },
        "RDSPropertiesS3Key": {
            "Description": "The object on S3 containing RDS properties",
            "Value": {
                "Fn::Join": [
                    "/",
                    [
                        {
                            "Fn::GetAtt": [
                                "CredentialBucket",
                                "DomainName"
                            ]
                        },
                        {
                            "Ref": "RdsMetadataFileName"
                        }
                    ]
                ]
            }
        },
        "RedshiftPropertiesS3Key": {
            "Description": "The object on S3 containing Redshift properties",
            "Value": {
                "Fn::Join": [
                    "/",
                    [
                        {
                            "Fn::GetAtt": [
                                "CredentialBucket",
                                "DomainName"
                            ]
                        },
                        {
                            "Ref": "RedshiftMetadataFileName"
                        }
                    ]
                ]
            }
        },
        "EMRPropertiesS3Key": {
            "Description": "The object on S3 containing EMR properties",
            "Value": {
                "Fn::Join": [
                    "/",
                    [
                        {
                            "Fn::GetAtt": [
                                "CredentialBucket",
                                "DomainName"
                            ]
                        },
                        {
                            "Ref": "EmrMetadataFileName"
                        }
                    ]
                ]
            }
        }
    }
}