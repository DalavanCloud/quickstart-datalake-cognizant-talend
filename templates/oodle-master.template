{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template uses the Talend Server templates with the AWS VPC quickstart.  The AWS VPC creates a multi-AZ, multi-subnet VPC infrastructure with managed NAT gateways in the public subnet for each Availability Zone. The Talend servers are deployed to the public subnet with the exception of the Jobservers which are deployed to the private subnet. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template. QS(0027)",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Quick Start"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "TalendResourceBucket",
                        "TalendLicenseBucket"
                    ]
                },
                {
                    "Label": {
                        "default": "Creation options for existing deployments"
                    },
                    "Parameters": [
                        "CreateDistantRunStack",
                        "CreateEmr",
                        "CreateTacDatabase",
						"CreateStudioStack"
                    ]
                },
                {
                    "Label": {
                        "default": "Network configuration"
                    },
                    "Parameters": [
                        "VPCCIDR",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "PrivateSubnet1CIDR",
                        "PrivateSubnet2CIDR",
                        "RemoteAccessCIDR",
						"AvailabilityZones"
                    ]
                },
                {
                    "Label": {
                        "default": "Sizing configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "TacInstanceType",
                        "LogserverInstanceType",
                        "JobserverInstanceType",
                        "NexusInstanceType",
						"StudioInstanceType",
						"BastionInstanceType",
						"NumBastionHosts",
						"RedshiftNodeType",
						"RedshiftNumberOfNodes",
						"EmrMasterInstanceType",
						"EmrCoreInstanceType",
						"EmrMasterInstanceType",
						"EmrCoreNodes"
                    ]
                },
                {
                    "Label": {
                        "default": "EC2 Autoscaling configuration"
                    },
                    "Parameters": [
                        "JobserverAutoscaleDesiredCapacity",
                        "JobserverAutoscaleMaxSize",
                        "DistantRunAutoscaleDesiredCapacity",
                        "DistantRunAutoscaleMaxSize"
                    ]
                },
                {
                    "Label": {
                        "default": "Redshift configuration"
                    },
                    "Parameters": [
                        "RedshiftHost",
                        "RedshiftUsername",
                        "RedshiftPassword",
                        "RedshiftDbName"
                    ]
                },
                {
                    "Label": {
                        "default": "Talend Administration Center configuration"
                    },
                    "Parameters": [
                        "TacDbHost",
                        "MasterDbUser",
                        "MasterDbPassword",
                        "TacDbSchema",
                        "TacUsername",
                        "TacPassword",
                        "TacDbUser",
                        "TacDbPassword",
                        "DbClass",
                        "DbAllocatedStorage",
						"AmcDbUser",
						"AmcDbPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Talend Nexus configuration"
                    },
                    "Parameters": [
                        "NexusAdminUserid",
                        "NexusAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Talend Git configuration"
                    },
                    "Parameters": [
                        "GitProtocol",
                        "GitHost",
                        "GitPort",
                        "GitRepo",
                        "GitAdminUserid",
                        "GitAdminPassword",
                        "GitAdminEmail",
                        "GitTacUserid",
                        "GitTacPassword",
                        "GitTacEmail"
                    ]
                }
            ],
            "ParameterLabels": {
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix (optional)"
                },
                "TalendResourceBucket": {
                    "default": "Talend Resource Bucket for Talend binaries."
                },
                "TalendLicenseBucket": {
                    "default": "Talend License Bucket"
                },
                "CreateDistantRunStack": {
                    "default": "Create Distant Run Stack"
                },
                "CreateEmr": {
                    "default": "Create EMR"
                },
                "CreateTacDatabase": {
                    "default": "Create TAC Database"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public Subnet1 CIDR"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public Subnet2 CIDR"
                },
                "PrivateSubnet1CIDR": {
                    "default": "Private Subnet1 CIDR"
                },
                "PrivateSubnet2CIDR": {
                    "default": "Private Subnet2 CIDR"
                },
                "RemoteAccessCIDR": {
                    "default": "Remote Access CIDR"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "TacInstanceType": {
                    "default": "TAC Instance Type"
                },
                "TacDbUser": {
                    "default": "TAC Database Username"
                },
                "TacDbPassword": {
                    "default": "TAC Database Password"
                },
                "TacDbHost": {
                    "default": "TAC Database Host (optional)"
                },
                "TacDbSchema": {
                    "default": "TAC Database Schema"
                },
                "MasterDbUser": {
                    "default": "TAC Master Database User"
                },
                "MasterDbPassword": {
                    "default": "TAC Master Database Password"
                },
                "DbClass": {
                    "default": "Database Instance Class"
                },
                "DbAllocatedStorage": {
                    "default": "Database Allocated Storage"
                },
                "NexusAdminUserid": {
                    "default": "Nexus Admin Userid"
                },
                "NexusAdminPassword": {
                    "default": "Nexus Admin Password"
                },
                "LogserverInstanceType": {
                    "default": "Logserver Instance Type"
                },
                "JobserverInstanceType": {
                    "default": "Jobserver Instance Type"
                },
                "NexusInstanceType": {
                    "default": "Nexus Instance Type"
                },
                "JobserverAutoscaleDesiredCapacity": {
                    "default": "Jobserver Autoscale Desired Capacity"
                },
                "JobserverAutoscaleMaxSize": {
                    "default": "Jobserver Autoscale Maximum Capacity"
                },
                "DistantRunAutoscaleDesiredCapacity": {
                    "default": "DistantRun Autoscale Desired Capacity"
                },
                "DistantRunAutoscaleMaxSize": {
                    "default": "DistantRun Autoscale Maximum Capacity"
                },
                "RedshiftHost": {
                    "default": "Redshift Host (optional)"
                },
                "RedshiftDbName": {
                    "default": "Redshift Database Name"
                },
                "RedshiftUsername": {
                    "default": "Redshift Username"
                },
                "RedshiftPassword": {
                    "default": "Redshift Password"
                },
                "GitProtocol": {
                    "default": "Git Protocol"
                },
                "GitHost": {
                    "default": "Git Host (optional)"
                },
                "GitPort": {
                    "default": "Git TCP Port"
                },
                "GitRepo": {
                    "default": "Git Repository"
                },
                "GitAdminUserid": {
                    "default": "Git Admin Userid"
                },
                "GitAdminPassword": {
                    "default": "Git Admin Password"
                },
                "GitAdminEmail": {
                    "default": "Git Admin Email"
                },
                "GitTacUserid": {
                    "default": "Git TAC Userid"
                },
                "GitTacPassword": {
                    "default": "Git TAC Password"
                },
                "GitTacEmail": {
                    "default": "Git TAC Email"
                }
            }
        }
    },
    "Parameters": {
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Default": "oodle.quickstart.talend",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.).",
            "Type": "String"
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Default": "",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).  Prefix cannot start with a slash but must end with a slash unless it is the empty string.",
            "Type": "String"
        },
        "TalendLicenseBucket": {
            "Description": "Bucket holding Talend license",
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-.]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, periods (.), and hyphens (-). It cannot start or end with a hyphen (-) or period (.)."
        },
        "TalendResourceBucket": {
            "Description": "Talend S3 resources bucket.",
            "Type": "String",
            "Default": "repo-quickstart-talend"
        },
        "TacInstanceType": {
            "Description": "TAC EC2 instance type",
            "Type": "String",
            "Default": "t2.medium",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "NexusInstanceType": {
            "Description": "Nexus EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "LogserverInstanceType": {
            "Description": "Logserver EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "JobserverInstanceType": {
            "Description": "Jobserver EC2 instance type",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "StudioInstanceType": {
            "Description": "Studio EC2 instance type",
            "Type": "String",
            "Default": "m3.xlarge",
            "AllowedValues": [
                "t1.micro",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m2.4xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "g2.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "hi1.4xlarge",
                "hs1.8xlarge",
                "cr1.8xlarge",
                "cc2.8xlarge",
                "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "BastionInstanceType": {
            "Description": "Amazon EC2 instance type for the bastion instances",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.nano",
                "t2.micro",
                "t2.small",
                "t2.medium",
                "t2.large",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge"
            ]
        },
        "CreateEmr": {
            "Description": "Create EMR.",
            "Type": "String",
            "Default": "true",
            "AllowedValues": [
                "true",
                "false"
            ]
        },
        "CreateDistantRunStack": {
            "Description": "Create Jobserver stack in public subnet for use by Studio Distant Run capability.",
            "Type": "String",
			"Default": "true",
            "AllowedValues": [ "true", "false" ]
        },
        "CreateTacDatabase": {
            "Description": "Create a new TAC Database (true) or use an existing TAC database (false)",
            "Type": "String",
            "AllowedValues": [ "true", "false" ],
            "Default": "true"
        },
        "CreateStudioStack": {
            "Description": "Create Studio stack.",
            "Type": "String",
			"Default": "true",
            "AllowedValues": [ "true", "false" ]
        },
        "NexusAdminUserid": {
            "Description": "Nexus administrator userid.",
            "Type": "String",
            "Default": "admin"
        },
        "NexusAdminPassword": {
            "Description": "Nexus password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "TacDbHost": {
            "Description": "Specify an external mysql database hostname, or leave blank to create a new RDS instance.",
            "Type": "String",
            "Default": ""
        },
        "TacPassword": {
            "Description": "TAC application password for tadmin account.",
            "Type": "String",
            "NoEcho": "true"
        },
        "MasterDbUser": {
            "Description": "The master or root user used to create TAC and AMC databases and the TAC user.  Only needed if creating the TAC or AMC databases.",
            "Type": "String",
            "Default": "tadmin"
        },
        "MasterDbPassword": {
            "Description": "Master user database password.  Only needed if creating the TAC or AMC databases.",
            "Type": "String",
            "NoEcho": "true"
        },
        "TacDbSchema": {
            "Description": "TAC database schema.",
            "Type": "String",
            "Default": "tac_quickstart"
        },
        "TacDbUser": {
            "Description": "TAC database user.",
            "Type": "String",
            "Default": "tac"
        },
        "TacDbPassword": {
            "Description": "TAC database password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "AmcDbUser": {
            "Description": "AMC database user.",
            "Type": "String",
            "Default": "amc"
        },
        "AmcDbPassword": {
            "Description": "AMC database password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "DbClass": {
            "Description": "Instance class of RDS instance",
            "Type": "String",
            "AllowedValues": [ "db.t2.micro", "db.t2.small", "db.t2.medium", "db.t2.large", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge" ],
            "Default": "db.t2.micro"
        },
        "DbAllocatedStorage": {
            "Description": "Allocated Storage (in GB) for RDS instance",
            "Type": "Number",
            "Default": "20"
        },
        "RedshiftHost": {
            "Description": "Specify an external Redshift database hostname, or leave blank to create a new RDS instance.  External Redshift databases must be configured separately to ensure access.",
            "Type": "String",
            "Default": ""
        },
		"RedshiftUsername": {
            "Description": "RedShift Username",
            "Type": "String",
            "Default": "tadmin"
        },
        "RedshiftPassword": {
            "Description": "RedShift Password:  Can only contain alphanumeric characters or the following special characters !^*-_+, between 8 and 28 characters.  Must contain at least one lowercase letter, one uppercase letter and one number.",
            "NoEcho": true,
            "Type": "String",
			"MinLength": 8,
            "MaxLength": 28,
            "AllowedPattern": "[a-zA-Z0-9!^*\\-_+]*"
        },
		"RedshiftDbName": {
            "Description": "RedShift Database name",
            "Type": "String",
            "Default": ""
        },
		"RedshiftNodeType": {
            "Type": "String",
            "Default": "dc1.large",
            "Description": "The node type to for the redshift cluster",
            "ConstraintDescription": "must be a valid RedShift node type.",
            "AllowedValues": [
                "dw1.xlarge",
                "dw1.8xlarge",
                "dw2.large",
                "dw2.8xlarge",
                "dc1.large",
                "dc1.8xlarge",
                "ds1.xlarge",
                "ds1.8xlarge",
                "ds2.xlarge",
                "ds2.8xlarge"
            ]
        },
		"RedshiftNumberOfNodes": {
            "Description": "The number of nodes in the redshift cluster.",
            "Type": "Number",
            "Default": "1"
        },
		"EmrMasterInstanceType": {
            "AllowedValues": [
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge"
            ],
            "Default": "m4.large",
            "Description": "Instance type for the EMR master node. Default is m4.large",
            "Type": "String"
        },
		"EmrCoreInstanceType": {
            "AllowedValues": [
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge"
            ],
            "Default": "m4.large",
            "Description": "Instance type for the EMR core nodes. Default is m4.large",
            "Type": "String"
        },
		"EmrCoreNodes": {
            "Description": "Number of EMR Core Nodes. Minimum 1",
            "MaxValue": "500",
            "MinValue": "1",
            "Type": "Number",
			"Default": "2"
        },
        "JobserverAutoscaleMaxSize": {
            "Description": "Talend Jobserver autoscale maximum size",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "10",
            "Default": "5"
        },
        "JobserverAutoscaleDesiredCapacity": {
            "Description": "Talend Jobserver autoscale maximum size",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "10",
            "Default": "1"
        },
        "DistantRunAutoscaleMaxSize": {
            "Description": "Talend DistantRun autoscale maximum size",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "10",
            "Default": "5"
        },
        "DistantRunAutoscaleDesiredCapacity": {
            "Description": "Talend DistantRun autoscale maximum size",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "10",
            "Default": "1"
        },
        "GitProtocol": {
            "Description": "Git protocol.",
            "Type": "String",
            "Default": "http"
        },
        "GitHost": {
            "Description": "Git host.",
            "Type": "String",
            "Default": ""
        },
        "GitPort": {
            "Description": "Git port.",
            "Type": "Number",
            "MinValue": "1",
            "MaxValue": "65535",
            "Default": "80"
        },
        "GitRepo": {
            "Description": "Git repository.",
            "Type": "String",
            "Default": "oodlejobs"
        },
        "GitAdminUserid": {
            "Description": "Git user.",
            "Type": "String",
            "Default": "tadmin"
        },
        "GitAdminPassword": {
            "Description": "Git password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "GitAdminEmail": {
            "Description": "Git admin contact email.",
            "Type": "String",
            "Default": ""
        },
        "GitTacUserid": {
            "Description": "Git TAC userid.",
            "Type": "String",
            "Default": "tac"
        },
        "GitTacPassword": {
            "Description": "Git TAC password.",
            "Type": "String",
            "NoEcho": "true"
        },
        "GitTacEmail": {
            "Description": "TAC contact email.",
            "Type": "String",
            "Default": ""
        },
        "NumBastionHosts": {
            "AllowedValues": [ "0", "1", "2" ],
            "Default": "1",
            "Description": "Enter the number of bastion hosts to create",
            "Type": "String"
        },
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved and only 2 AZs are used for this deployment.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>"
        },
        "KeyPairName": {
            "Description": "Public/private key pairs allow you to securely connect to your instance after it launches",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "PrivateSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/19",
            "Description": "CIDR block for private subnet 1 located in Availability Zone 1.",
            "Type": "String"
        },
        "PrivateSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.32.0/19",
            "Description": "CIDR block for private subnet 2 located in Availability Zone 2.",
            "Type": "String"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.128.0/20",
            "Description": "CIDR Block for the public DMZ subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "PublicSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.144.0/20",
            "Description": "CIDR Block for the public DMZ subnet 2 located in Availability Zone 2",
            "Type": "String"
        },
        "RemoteAccessCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/x",
            "Description": "Allowed CIDR block for external SSH access to the bastions",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR Block for the VPC",
            "Type": "String"
        }
    },
    "Mappings": {
        "Talend": {
            "flags": {
                "SaveCredentialsEnabled": "true"
            }
        }
    },
    "Conditions": {
        "CreateRdsCondition": { 
            "Fn::Equals": [ "", { "Ref": "TacDbHost" } ]
        },
        "CreateGitCondition": {
            "Fn::Equals": [ "", { "Ref": "GitHost" } ]
        },
        "CreateRedshiftCondition": {
            "Fn::Equals": [ "", { "Ref": "RedshiftHost" } ]
        },
        "CreateEmrCondition": {
            "Fn::Equals": [ "true", { "Ref": "CreateEmr" } ]
        },
        "CreateStudioCondition": {
            "Fn::Equals": [
                { "Ref": "CreateStudioStack" },
                "true"
            ]
        },
        "CreateBastionCondition": {
            "Fn::Not": [
                { "Fn::Equals": [ { "Ref": "NumBastionHosts" }, "0" ] }
            ]
        }
    },
    "Resources": {
        "VpcStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Sub": "https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}submodules/bastion/submodules/quickstart-aws-vpc/templates/aws-vpc.template" },
                "Parameters": {
                    "AvailabilityZones": {
                        "Fn::Join": [ ",", { "Ref": "AvailabilityZones" } ]
                    },
                    "KeyPairName": { "Ref": "KeyPairName" },
                    "NumberOfAZs": "2",
                    "PrivateSubnet1ACIDR": { "Ref": "PrivateSubnet1CIDR" },
                    "PrivateSubnet2ACIDR": { "Ref": "PrivateSubnet2CIDR" },
                    "PublicSubnet1CIDR": { "Ref": "PublicSubnet1CIDR" },
                    "PublicSubnet2CIDR": { "Ref": "PublicSubnet2CIDR" },
                    "VPCCIDR": { "Ref": "VPCCIDR" }
                }
            }
        },

        "OodleStack": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "TemplateURL": { "Fn::Sub": "https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}templates/oodle.template" },
                "Parameters": {
                    "QSS3BucketName": { "Ref": "QSS3BucketName" },
                    "QSS3KeyPrefix": { "Ref": "QSS3KeyPrefix" },
                    "KeyPairName": { "Ref": "KeyPairName" },
                    "TalendLicenseBucket": { "Ref": "TalendLicenseBucket" },
                    "TalendResourceBucket": { "Ref": "TalendResourceBucket" },
                    "VpcId": { "Fn::GetAtt": [ "VpcStack", "Outputs.VPCID" ] },
                    "PublicSubnetId1": { "Fn::GetAtt": [ "VpcStack", "Outputs.PublicSubnet1ID"] },
                    "PublicSubnetId2": { "Fn::GetAtt": [ "VpcStack", "Outputs.PublicSubnet2ID"] },
                    "PrivateSubnetId1": { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnet1AID"] },
                    "PrivateSubnetId2": { "Fn::GetAtt": [ "VpcStack", "Outputs.PrivateSubnet2AID"] },
                    "RemoteAccessCIDR": { "Ref": "RemoteAccessCIDR" },
                    "TacInstanceType": { "Ref": "TacInstanceType" },
                    "NexusInstanceType": { "Ref": "NexusInstanceType" },
                    "LogserverInstanceType": { "Ref": "LogserverInstanceType" },
                    "JobserverInstanceType": { "Ref": "JobserverInstanceType" },
                    "StudioInstanceType": { "Ref": "StudioInstanceType" },
                    "BastionInstanceType": { "Ref": "BastionInstanceType" },
                    "CreateEmr": { "Ref": "CreateEmr" },
                    "CreateDistantRunStack": { "Ref": "CreateDistantRunStack" },
                    "CreateTacDatabase": { "Ref": "CreateTacDatabase" },
                    "CreateStudioStack": { "Ref": "CreateStudioStack" },
                    "NexusAdminUserid": { "Ref": "NexusAdminUserid" },
                    "NexusAdminPassword": { "Ref": "NexusAdminPassword" },
                    "TacDbHost": { "Ref": "TacDbHost" },
                    "TacPassword": { "Ref": "TacPassword" },
                    "MasterDbUser": { "Ref": "MasterDbUser" },
                    "MasterDbPassword": { "Ref": "MasterDbPassword" },
                    "TacDbSchema": { "Ref": "TacDbSchema" },
                    "TacDbUser": { "Ref": "TacDbUser" },
                    "TacDbPassword": { "Ref": "TacDbPassword" },
                    "AmcDbUser": { "Ref": "AmcDbUser" },
                    "AmcDbPassword": { "Ref": "AmcDbPassword" },
                    "DbClass": { "Ref": "DbClass" },
                    "DbAllocatedStorage": { "Ref": "DbAllocatedStorage" },
                    "RedshiftHost": { "Ref": "RedshiftHost" },
                    "RedshiftUsername": { "Ref": "RedshiftUsername" },
                    "RedshiftPassword": { "Ref": "RedshiftPassword" },
                    "RedshiftDbName": { "Ref": "RedshiftDbName" },
                    "RedshiftNodeType": { "Ref": "RedshiftNodeType" },
                    "RedshiftNumberOfNodes": { "Ref": "RedshiftNumberOfNodes" },
                    "EmrMasterInstanceType": { "Ref": "EmrMasterInstanceType" },
                    "EmrCoreInstanceType": { "Ref": "EmrCoreInstanceType" },
                    "EmrCoreNodes": { "Ref": "EmrCoreNodes" },
                    "JobserverAutoscaleMaxSize": { "Ref": "JobserverAutoscaleMaxSize" },
                    "JobserverAutoscaleDesiredCapacity": { "Ref": "JobserverAutoscaleDesiredCapacity" },
                    "DistantRunAutoscaleMaxSize": { "Ref": "DistantRunAutoscaleMaxSize" },
                    "DistantRunAutoscaleDesiredCapacity": { "Ref": "DistantRunAutoscaleDesiredCapacity" },
                    "GitProtocol": { "Ref": "GitProtocol" },
                    "GitHost": { "Ref": "GitHost" },
                    "GitPort": { "Ref": "GitPort" },
                    "GitRepo": { "Ref": "GitRepo" },
                    "GitAdminUserid": { "Ref": "GitAdminUserid" },
                    "GitAdminPassword": { "Ref": "GitAdminPassword" },
                    "GitAdminEmail": { "Ref": "GitAdminEmail" },
                    "GitTacUserid": { "Ref": "GitTacUserid" },
                    "GitTacPassword": { "Ref": "GitTacPassword" },
                    "GitTacEmail": { "Ref": "GitTacEmail" },
                    "NumBastionHosts": { "Ref": "NumBastionHosts"  }
                }
            }
        }
    },
    "Outputs": {
        "VpcStack": {
            "Value": { "Ref": "VpcStack" },
            "Description": "Nested VPC stack",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:VpcStack" } 
				} 
        },
        "OodleStack": {
            "Value": { "Ref": "OodleStack" },
            "Description": "Nested Oodle stack",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:OodleStack" } 
				} 
        },
        "GitPublicDnsName": {
            "Condition": "CreateGitCondition",				
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.GitPublicDnsName"] },
            "Description": "Git DNS",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:GitPublicDnsName" } 
			}
        },		
        "TacPublicDnsName": {
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.TacPublicDnsName"] },
            "Description": "TAC public DNS",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:TacPublicDnsName" } 
			}
        },
        "NexusPublicDnsName": {
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.NexusPublicDnsName"] },
            "Description": "Nexus public DNS",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:NexusPublicDnsName" } 
			}
        },	
        "StudioPublicDnsName": {
            "Condition": "CreateStudioCondition",			
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.StudioPublicDnsName"] },
            "Description": "Studio public URL",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:StudioPublicDnsName" } 
			}
        },		
        "RedshiftJDBC": {
            "Condition": "CreateRedshiftCondition",		
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.RedshiftJDBC"] },
            "Description": "Redshift JDBC Url",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:RedshiftJDBC" } 
			}
        },
		"RedshiftEndpoint": {
            "Condition": "CreateRedshiftCondition",		
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.RedshiftEndpoint"] },
            "Description": "Redshift Endpoint",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:RedshiftEndpoint" } 
			}
        },
		"EmrMasterPublicDns": {
            "Condition": "CreateEmrCondition",		
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.EmrMasterPublicDns"] },
            "Description": "EMR public DNS",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:EmrMasterPublicDns" } 
			}
        },
		"CredentialBucket": {	
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.CredentialBucket"] },
            "Description": "Talend Credential Bucket",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:CredentialBucket" } 
			}
        },		
		"TalendSourceBucket": {	
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.TalendSourceBucket"] },
            "Description": "Talend Source Bucket",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:TalendSourceBucket" } 
			}
        },	
		"TalendTargetBucket": {	
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.TalendTargetBucket"] },
            "Description": "Talend Target Bucket",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:TalendTargetBucket" } 
			}
        },	
		"EmrLogBucket": {	
            "Value": { "Fn::GetAtt": [ "OodleStack", "Outputs.EmrLogBucket"] },
            "Description": "Emr Log Bucket",
			"Export": {
				"Name": { "Fn::Sub": "${AWS::StackName}:EmrLogBucket" } 
			}
        }		
    }
}
